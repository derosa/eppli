#summary Memoria del proyecto
#labels Phase-Deploy,Memoria

= Introducción =
Esta página contiene la memoria del proyecto, para ser formateada y recauchutada luego en el editor.

La memoria debe contener ~60 páginas, junto con una presentación de unas 20.

La primera entrega de la memoria debe tener un índice detallado y algunos capítulos introductorios.

= Índice =

 # Introducción.
  # Presentación del proyecto.
  # Introducción a la planificación de procesos.
  # El planificador de procesos de linux.
 # El proyecto _eppli_.
  # Requisitos y funcionalidades de _eppli_.
  # El _scheduler_ de linux aplicado a _eppli_.
 # Diseño de _eppli_.
  # Herramientas de construcción.
  # Estruturas de datos.
  # Subsistemas.
 # Implementación.
  # Núcleo de emulación.
  # Interface gráfica.
 # Bibliografía.
  # Libros.
  # Internet.

= Introducción = 

== Presentación del proyecto ==

A pesar de la gran cantidad de documentación existente sobre la teoría de planificadores de procesos en sistemas operativos, no existen apenas aplicaciones prácticas de estos principios más allá de su uso real en SS.OO.

La primera dificultad con que un estudiante se encuentra a la hora de encarar estos algoritmos es la falta de resultados prácticos: Ver cómo se evalúan procesos reales, saber por qué el planificador cambia de tarea, cómo se cambia la prioridad de los procesos, cómo afecta el que un proceso sea CPU intensivo o I/O intensivo, etc. Todo esto no es fácilmente mensurable en un S.O. en ejecución, por lo que se hace necesario un método que no solo sea más interactivo y parejo con la velocidad de proceso de la persona, sino que permita indagar en las interioridades del mismo y modificarlo para ver cómo afectan los cambios a los resultados.

La resolución de estos problemas es el objetivo de mi TFC, que consiste en la programación de un emulador del planificador de procesos del kernel linux. El nombre del proyecto es _EPPLI_ (*_Emulador del Planificador de Procesos de Linux_*), y puede seguirse desde http://code.google.com/p/eppli

== Introducción a la planificación de procesos ==

El principal cometido de un sistema operativo es gestionar los recursos de la máquina donde se ejecuta. Se gestiona la memoria, las peticiones de I/O, los dispositivos... y se gestionan procesos.

La gestión de procesos recibe el nombre de planificación de procesos y es llevada a cabo por el planificador de procesos (_process scheduler_). Esta parte del SSOO se encarga de decidir qué proceso debe ejecutarse en un momento determinado en función del entorno. Ésta tarea no es fácil, pues debe intentar cumplir con varios objetivos, a veces incongruentes entre sí:

 # El tiempo de CPU debe ser repartido de forma justa entre todos los procesos.
 # Los procesos interactivos deben seguir siéndolo.
 # A cada proceso debe permitírsele la ejecución durante un mínimo de tiempo.
 # Ningún proceso debe estar demasiado tiempo sin usar la CPU (_process starvation_)
 
Puede verse que, por ejemplo, los puntos 1 y 2 son opuestos. No es posible repartir de forma justa el tiempo de CPU entre todos los procesos si se favorecen los procesos interactivos. Cuando se favorece un tipo de procesos, inevitablemente otros procesos "sufren" las consecuencias.

De la misma forma, los puntos 3 y 4 también caen en la contradicción: Si cada proceso debe ejecutarse un mínimo periodo de tiempo, con suficiente número de procesos en ejecución no será posible impedir que un proceso esté demasiado tiempo sin CPU. Por ejemplo, si en un sistema tenemos 10 procesos en ejecución y se ejecutan cada uno de ellos durante 100ms. secuencialmente, habrá un proceso que no podrá usar la CPU hasta que transcurra 1 segundo.

Teniendo en cuenta lo anterior, un planificador de procesos debe tener claro a qué entorno está orientado, pues no es lo mismo un entorno de computación científica donde los procesos usarían la CPU durante horas contínuamente si pudieran, que el equipo de un equipo de producción de video, donde los procesos necesitan capacidad de ejecución y reacción en tiempo real. Es necesario un compromiso entre los procesos interactivos y los que usan intensivamente la CPU.

Históricamente se han diseñado los planificadores de procesos siguiente esquemas simples, pero el cambio de las necesidades de los usuarios, normalmente orientados a aplicaciones más interactivas) han hecho necesaria la evolución de estos esquemas. Algunos de estos métodos simples son:

 * FIFO (_First In, First Out_): Consiste en despachar los procesos por orden de llegada y hasta que estos abandonen voluntariamente la CPU. Su uso es 
más obvio en los primeros sistemas por lotes, en los que no existía interactividad del usuario.
 * Por rotación (_Round Robin_): Los procesos se ejecutan durante un cuanto de tiempo determinado. Cuando este cuanto expira se pasa directamente al siguiente proceso de la lista, volviendo al primero cuando se termina con el último proceso.
 * Colas multinivel (_Multilevel queues_): Diversas colas administradas por _Round Robin_, cada una de una prioridad. Los procesos pueden pasar de una cola a otra, dependiendo de ciertos factores.
 * Planificador por lotería (_Lottery Scheduling_): Consiste en asignar a cada proceso un número de ticket. Cuando hay que seleccionar un proceso, el planificador selecciona un número al azar y ejecuta el proceso correspondiente.
 
Otro concepto necesario para comprender la extensión de la problemática asociada a la planificación de procesos es el de apropiación (_preemption_):
La apropiación consiste en arrebatar la CPU a un proceso en ejecución mientras aún no la ha cedido voluntariamente. Sistemas operativos monotarea y monousuario, como MS-DOS, carecen del concepto de apropiación, por lo que un proceso continuaba la ejecución hasta que terminaba o cedía voluntariamente la CPU (_cooperative multitasking_). Esto tiene la ventaja de ser un sistema fácil de desarrollar y mantener, pues simplemente se ejecuta la aplicación solicitada, pero implica que el sistema queda a merced del proceso en ejecución. Actualmente la mayoría de SSOO hacen uso de la apropiación, que hace posible retirar la CPU a un proceso cuando se determina que su cuota de tiempo ha finalizado. En el kernel linux es posible incluso apropiarse de la CPU mientras el proceso ejecuta código del kernel. Por ejemplo, puede quitarse la CPU a un proceso mientras está llamando a la función sys_read del sistema.
